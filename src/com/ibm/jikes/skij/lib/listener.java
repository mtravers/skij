package com.ibm.jikes.skij.lib;
class listener extends SchemeLibrary {
  static {
    evalStringSafe("(define (line-end? x) (if (char? x) (set! x (char->int x))) (or (= x 10) (= x 13)))");
    evalStringSafe("(define *avoid-1.1-events* #f)");
    evalStringSafe("(define (make-swing-listener-window) (set! *avoid-1.1-events* #f) (define textarea (new '#,(swing-class 'JTextArea))) (define panel (new '#,(swing-class 'JPanel) (new 'java.awt.GridLayout 1 1))) (define scroller (new '#,(swing-class 'JScrollPane))) (invoke (invoke scroller 'getViewport) 'add textarea) (invoke panel 'add scroller) (define w (make-swing-window-for-panel 'Listener panel)) (define thread (make-listener** textarea)) (add-window-close-handler w (lambda () (print `(stopping ,thread)) (invoke thread 'stop))) (invoke w 'setSize 300 200) (invoke w 'show) (invoke textarea 'grabFocus) textarea)");
    evalStringSafe("(define (make-awt-listener-window) (define textarea (new (if *avoid-1.1-events* 'com.ibm.jikes.skij.misc.ListenerTextArea 'java.awt.TextArea))) (define panel (new 'java.awt.Panel)) (invoke panel 'setLayout (new 'java.awt.GridLayout 1 1)) (invoke panel 'add textarea) (define w (make-window-for-panel \"Listener\" panel)) (define thread (make-listener** textarea)) (add-window-close-handler w (lambda () (print `(stopping ,thread)) (invoke thread 'stop))) textarea)");
    evalStringSafe("(begin '(defstruct listener text-area input-start) (define make-listener cons) (define listener-text-area car) (define listener-input-start cdr) (define set-listener-input-start! set-cdr!) (define (listener-write listener string) (let* ((textarea (listener-text-area listener)) (swing? (not (instanceof textarea 'java.awt.TextArea)))) (invoke textarea (if swing? 'append 'appendText) string) (if swing? (invoke textarea 'setCaretPosition (listener-end listener))) (set-listener-input-start! listener (listener-end listener)))) (define (listener-read listener) (define string (invoke (listener-text-area listener) 'getText (listener-input-start listener) (- (listener-end listener) (listener-input-start listener)))) (set! input-start (listener-end listener)) string) (define (listener-read-n listener n) (define start (listener-input-start listener)) (do ((text (invoke (listener-text-area listener) 'getText) (invoke (listener-text-area listener) 'getText))) ((>= (invoke text 'length) (+ start n)) (set-listener-input-start! listener (+ start n)) (substring text start (+ start n))) (synchronized listener (invoke listener 'wait)))) (define (listener-end listener) (invoke (invoke (listener-text-area listener) 'getText) 'length)) (define key-typed (let ((v (catch (peek-static 'java.awt.event.KeyEvent 'KEY_TYPED)))) (if (instanceof v 'java.lang.Throwable) #f v))))");
    evalStringSafe("(define (make-listener** text-area) (define thread #f) (make-listener*** text-area (lambda (reader writer) (define sl (new 'com.ibm.jikes.skij.SchemeListener reader writer #t)) (set! thread (new 'java.lang.Thread (lambda () (invoke sl 'repl)) \"Skij Listener\")) (invoke thread 'start))) thread)");
    evalStringSafe("(define (make-applet-listener text-area) (define thread #f) (make-listener*** text-area (lambda (reader writer) (define sl (new 'com.ibm.jikes.skij.SchemeListener reader writer #t)) (poke-static 'com.ibm.jikes.skij.Environment 'top (invoke sl 'getTopEnv)) (set! thread (new 'java.lang.Thread (lambda () (invoke sl 'repl)) \"Skij Listener\")) (invoke thread 'start))) thread)");
    evalStringSafe("(define (make-listener*** text-area listener-proc) (define swing? (not (instanceof text-area 'java.awt.TextArea))) (define l (make-listener text-area 0)) (define reader (new 'com.ibm.jikes.skij.SchemeReader (lambda (chars start count) (define string (listener-read-n l count)) (define rcount (invoke string 'length)) (define index 0) (define bytes (invoke string 'getBytes)) (do () ((= index rcount)) (vector-set! chars (+ start index) (int->char (vector-ref bytes index))) (set! index (+ 1 index))) rcount) (lambda ()))) (define writer (new 'com.ibm.jikes.skij.SchemeWriter (lambda (chars start count) (define string (new 'java.lang.String chars start count)) (listener-write l string)) (lambda ()) (lambda ()))) (if *avoid-1.1-events* (poke (listener-text-area l) 'handler (lambda (evt key) (if (line-end? key) (synchronized l (invoke l 'notify) #f) #f))) (invoke (listener-text-area l) 'addKeyListener (new 'com.ibm.jikes.skij.misc.GenericCallback (lambda (evt) (if (and (equal? (invoke evt 'getID) key-typed) (line-end? (invoke evt 'getKeyChar))) (synchronized l (invoke l 'notify))))))) (listener-proc reader writer))");
  }
}