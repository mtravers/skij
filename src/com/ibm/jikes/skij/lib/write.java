package com.ibm.jikes.skij.lib;
class write extends SchemeLibrary {
  static {
    evalStringSafe("(define *print-string-escapes* #f)");
    evalStringSafe("(define (write thing . rest) (define port (if (null? rest) (current-output-port) (car rest))) (cond ((%%null? thing) (display \"#<null>\" port)) ((string? thing) (display \"\\\"\" port) (if *print-string-escapes* (display-escaped-string thing port) (display thing port)) (display \"\\\"\" port)) ((pair? thing) (write-pair thing port)) ((null? thing) (display \"()\" port)) ((or (symbol? thing) (number? thing)) (display thing port)) ((vector? thing) (display \"#\" port) (write (vector->list thing) port)) ((boolean? thing) (if thing (display \"#t\" port) (display \"#f\" port))) ((char? thing) (display \"#\\\\\" port) (display (to-string thing) port)) (#t (display \"#<\" port) (display (to-string thing) port) (display \">\" port))) thing)");
    evalStringSafe("(define eol-character (integer->char 10))");
    evalStringSafe("(begin (define (display-escaped-string string port) (define len (string-length string)) (let loop ((pos 0)) (unless (= pos len) (define char (string-ref string pos)) (aif (assv char '((#\\\" \"\\\\\\\"\") (#\\\\ \"\\\\\\\\\") (#,eol-character \"\\\\n\") (#\\' \"\\\\\\'\"))) (display (cadr it) port) (write-char char port)) (loop (+ pos 1))))) (define (write-pair pair port) (if (and (not (null? (cdr pair))) (memq (car pair) '#,(list 'quote 'quasiquote 'unquote 'unquote-splicing '%%read-eval))) (begin (display (case (car pair) ((quote) \"\\'\") ((quasiquote) \"`\") ((unquote) \",\") ((unquote-splicing) \",@\") ((%%read-eval) \"#,\")) port) (write (cadr pair) port)) (begin (display \"(\" port) (write (car pair) port) (write-list (cdr pair) port)))) (define (write-list list port) (if (null? list) (display \")\" port) (if (not (pair? list)) (begin (display \" . \" port) (write list port) (display \")\" port)) (begin (display \" \" port) (write (car list) port) (write-list (cdr list) port))))))");
  }
}