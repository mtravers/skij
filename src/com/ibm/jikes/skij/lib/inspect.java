package com.ibm.jikes.skij.lib;
class inspect extends SchemeLibrary {
  static {
    evalStringSafe("(define *jive-mode* #f)");
    evalStringSafe("(define (jive-inspect obj) (set! *jive-mode* #t) (inspect obj))");
    evalStringSafe("(define (inspect obj) (define window (hashtable-lookup *inspector-table* obj (lambda (obj) (define window (inspect1 obj)) (invoke window 'addWindowListener (new 'com.ibm.jikes.skij.misc.GenericCallback (lambda (evt) (if (= (invoke evt 'getID) window-closing-event-id) (begin (invoke window 'dispose) (hashtable-remove *inspector-table* obj) (set! inspect-top-window #f) (inspect-set-top-object #f)))))) window))) (invoke window 'toFront) window)");
    evalStringSafe("(begin (define (selected-item table) (define model (invoke table 'getModel)) (define row (invoke table 'getSelectedRow)) (list (invoke model 'getValueAt row 0) (deadapt (invoke model 'getValueAt row 1)))) (define *inspect-history* '()) (define (inspect-add-to-history obj) (push obj *inspect-history*)) (define inspected #f) (define (inspect-set-top-object obj) (set! inspected obj)) (define window-activate-event-id (peek-static 'java.awt.event.WindowEvent 'WINDOW_ACTIVATED)) (define window-closed-event-id (peek-static 'java.awt.event.WindowEvent 'WINDOW_CLOSED)) (define window-closing-event-id (peek-static 'java.awt.event.WindowEvent 'WINDOW_CLOSING)) (define inspect-top-window #f) (define *inspector-table* (make-hashtable)) (define (close-all-inspectors) (for-hashtable (lambda (obj window) (invoke window 'dispose)) *inspector-table*)) (define (inspect1 obj) (define table #f) (define table-panel #f) (define table-maker #f) (define panel (new '#,(swing-class 'JPanel))) (define layout (new 'java.awt.GridBagLayout)) (invoke panel 'setLayout layout) (define constraints (new 'java.awt.GridBagConstraints)) (define (add-component comp) (invoke layout 'setConstraints comp constraints) (invoke panel 'add comp)) (add-component (make-swing-button \"Inspect\" (lambda (evt) (let ((item (selected-item table))) (jump obj (car item) (cadr item)))))) (add-component (make-swing-button \"Refresh\" (lambda (evt) (in-own-thread (define parent (invoke table-panel 'getParent)) (invoke parent 'remove table-panel) (table-maker) (invoke parent 'validate))))) (define remainder (peek-static 'java.awt.GridBagConstraints 'REMAINDER)) (set! table-maker (lambda () (poke constraints 'gridwidth remainder) (poke constraints 'gridheight remainder) (poke constraints 'weightx 1.0) (poke constraints 'weighty 1.0) (poke constraints 'gridx 0) (poke constraints 'gridy 1) (poke constraints 'fill (peek-static 'java.awt.GridBagConstraints 'BOTH)) (define data (adapt-inspect-data (inspect-data obj))) (set! table (make-table (cdr data) (car data))) (set! table-panel (make-table-panel table 350 200)) (add-component table-panel))) (table-maker) (inspect-add-to-history obj) (define window (make-swing-window-for-panel (if *jive-mode* (to-string obj) (write-to-string obj)) panel)) (inspect-set-top-object obj) (invoke window 'addWindowListener (new 'com.ibm.jikes.skij.misc.GenericCallback (lambda (evt) (if (= (invoke evt 'getID) window-activate-event-id) (begin (set! inspect-top-window window) (inspect-set-top-object obj)))))) (if inspect-top-window (invoke window 'setLocation (let ((newloc (new 'java.awt.Point (invoke inspect-top-window 'getLocation)))) (invoke newloc 'translate 22 22) newloc))) window) (define (jump from-obj link to-obj) (in-own-thread (inspect to-obj))) (define (write-adaptor object) (let ((adaptor (new 'com.ibm.jikes.skij.misc.Adaptor object))) (invoke adaptor 'addBinding 'toString (lambda () (write-to-string object))) adaptor)) (define (adapt-inspect-data data) (unless *jive-mode* (for-each (lambda (item) (define datum (cadr item)) (unless (or (symbol? datum) (number? datum)) (set-car! (cdr item) (write-adaptor datum)))) (cdr data))) data) (define (deadapt thing) (if (instanceof thing 'com.ibm.jikes.skij.misc.Adaptor) (peek thing 'object) thing)) (require-write))");
    evalStringSafe("(define (inspect-class-methods class) (unless (instanceof class 'java.lang.Class) (set! class (class-named class))) (inspect (sort (vector->list (invoke class 'getMethods)) (lambda (a b) (string<? (invoke a 'getName) (invoke b 'getName))))))");
    evalStringSafe("(define (inspect-tree from child-generator) (define tree (make-tree-window (to-string from) (generate-tree from child-generator (lambda (x) x)))) (tree-add-mouse-listener tree (lambda (node evt) (inspect (invoke node 'getUserObject)))) tree)");
    evalStringSafe("(define (inspect-components from) (inspect-tree from (lambda (comp) (if (instanceof comp 'java.awt.Container) (vector->list (invoke comp 'getComponents)) '()))))");
  }
}